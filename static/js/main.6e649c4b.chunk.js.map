{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","webcamRef","useRef","canvasRef","style","position","marginLeft","marginRight","left","right","textAlign","zIndex","minHeight","useEffect","selfieSegmentation","SelfieSegmentation","locateFile","file","setOptions","modelSelection","onResults","current","camera","Camera","video","onFrame","a","send","image","width","height","start","results","clientWidth","clientHeight","canvasCtx","getContext","setTransform","save","clearRect","drawImage","segmentationMask","globalCompositeOperation","fillStyle","fillRect","restore","ref","mirrored","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAsGeA,EAhGH,WACR,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAEnBE,EAAQ,CACVC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRC,UAAW,QAGfC,qBAAU,WACN,IAAMC,EAAqB,IAAIC,qBAAmB,CAC9CC,WAAY,SAACC,GACT,MAAM,+DAAN,OAAsEA,MAQ9E,GALAH,EAAmBI,WAAW,CAC1BC,eAAgB,IAEpBL,EAAmBM,UAAUA,GAGI,qBAAtBnB,EAAUoB,SACK,OAAtBpB,EAAUoB,QACZ,CACE,IAAMC,EAAS,IAAIC,SAAOtB,EAAUoB,QAAQG,MAAO,CAC/CC,QAAQ,WAAD,4BAAE,sBAAAC,EAAA,sEACCZ,EAAmBa,KAAK,CAC1BC,MAAO3B,EAAUoB,QAAQG,QAFxB,2CAAF,kDAAC,GAKRK,MAAO,KACPC,OAAQ,MAEZR,EAAOS,WAEZ,IAEH,IAAMX,EAAY,SAACY,GAEf7B,EAAUkB,QAAQQ,MAAQ5B,EAAUoB,QAAQG,MAAMS,YAClD9B,EAAUkB,QAAQS,OAAS7B,EAAUoB,QAAQG,MAAMU,aAEnD,IAAMC,EAAYhC,EAAUkB,QAAQe,WAAW,MAE/CD,EAAUE,cAAc,EAAG,EAAG,EAAG,EAAGlC,EAAUkB,QAAQQ,MAAO,GAC7DM,EAAUG,OACVH,EAAUI,UACN,EACA,EACApC,EAAUkB,QAAQQ,MAClB1B,EAAUkB,QAAQS,QAEtBK,EAAUK,UACNR,EAAQS,iBACR,EACA,EACAtC,EAAUkB,QAAQQ,MAClB1B,EAAUkB,QAAQS,QAItBK,EAAUO,yBAA2B,YACrCP,EAAUK,UACNR,EAAQJ,MACR,EACA,EACAzB,EAAUkB,QAAQQ,MAClB1B,EAAUkB,QAAQS,QAItBK,EAAUO,yBAA2B,mBACrCP,EAAUQ,UAAY,UACtBR,EAAUS,SACN,EACA,EACAzC,EAAUkB,QAAQQ,MAClB1B,EAAUkB,QAAQS,QAEtBK,EAAUU,WAGd,OACI,gCACI,cAAC,IAAD,CAAQC,IAAK7C,EAAWG,MAAOA,EAAO2C,UAAQ,IAC9C,wBAAQD,IAAK3C,EAAWC,MAAOA,QCrF5B4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6e649c4b.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport { SelfieSegmentation } from \"@mediapipe/selfie_segmentation\";\r\nimport { Camera } from \"@mediapipe/camera_utils\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n    const webcamRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    // https://stackoverflow.com/questions/17976995/how-to-center-absolute-div-horizontally-using-css\r\n    const style = {\r\n        position: \"absolute\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        left: 0,\r\n        right: 0,\r\n        textAlign: \"center\",\r\n        zIndex: 1,\r\n        minHeight: \"100%\",\r\n    };\r\n\r\n    useEffect(() => {\r\n        const selfieSegmentation = new SelfieSegmentation({\r\n            locateFile: (file) => {\r\n                return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;\r\n            },\r\n        });\r\n        selfieSegmentation.setOptions({\r\n            modelSelection: 1,\r\n        });\r\n        selfieSegmentation.onResults(onResults);\r\n\r\n        if (\r\n            typeof webcamRef.current !== \"undefined\" &&\r\n            webcamRef.current !== null\r\n        ) {\r\n            const camera = new Camera(webcamRef.current.video, {\r\n                onFrame: async () => {\r\n                    await selfieSegmentation.send({\r\n                        image: webcamRef.current.video,\r\n                    });\r\n                },\r\n                width: 1280,\r\n                height: 720,\r\n            });\r\n            camera.start();\r\n        }\r\n    }, []);\r\n\r\n    const onResults = (results) => {\r\n        // the following two lines of code fix the resolution of the canvas\r\n        canvasRef.current.width = webcamRef.current.video.clientWidth;\r\n        canvasRef.current.height = webcamRef.current.video.clientHeight;\r\n\r\n        const canvasCtx = canvasRef.current.getContext(\"2d\");\r\n        // https://stackoverflow.com/questions/50681592/getusermedia-mirror-image-instead-of-flip\r\n        canvasCtx.setTransform(-1, 0, 0, 1, canvasRef.current.width, 0);\r\n        canvasCtx.save();\r\n        canvasCtx.clearRect(\r\n            0,\r\n            0,\r\n            canvasRef.current.width,\r\n            canvasRef.current.height\r\n        );\r\n        canvasCtx.drawImage(\r\n            results.segmentationMask,\r\n            0,\r\n            0,\r\n            canvasRef.current.width,\r\n            canvasRef.current.height\r\n        );\r\n\r\n        // Only overwrite existing pixels (i.e. the segmentation mask)\r\n        canvasCtx.globalCompositeOperation = \"source-in\";\r\n        canvasCtx.drawImage(\r\n            results.image,\r\n            0,\r\n            0,\r\n            canvasRef.current.width,\r\n            canvasRef.current.height\r\n        );\r\n\r\n        // Only overwrite missing pixels (i.e. anything outside of the segmentation mask)\r\n        canvasCtx.globalCompositeOperation = \"destination-atop\";\r\n        canvasCtx.fillStyle = \"#00FF00\";\r\n        canvasCtx.fillRect(\r\n            0,\r\n            0,\r\n            canvasRef.current.width,\r\n            canvasRef.current.height\r\n        );\r\n        canvasCtx.restore();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Webcam ref={webcamRef} style={style} mirrored />\r\n            <canvas ref={canvasRef} style={style} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}